{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -XFlexibleInstances #-}
{-# LANGUAGE ExistentialQuantification #-}


--------------------------------------------------------------------------
--------------------------------- Module ---------------------------------
--------------------------------------------------------------------------
module Valuation.Analytical  
    ( 
     AnalyticValuable, valueA, valueAGreeks,
     PayOff, evalPO, Model, integrate,
     ValuationInfo (..)
    ) where

--------------------------------------------------------------------------
------------------------------- Imports ----------------------------------
--------------------------------------------------------------------------
import Utils.MyJSON
import Utils.MyUtils
import Valuation
--------------------------------------------------------------------------
------------------------------- Classes ----------------------------------
--------------------------------------------------------------------------

class AnalyticValuable a where
    valueA       :: a -> Result_ ValueStorage
    valueAGreeks :: a -> Result_ ValueStorage
--------------------------------------------------------------------------
class PayOff p where
    evalPO :: p -> Double -> Double
--------------------------------------------------------------------------
class Model m where
    integrate :: PayOff p => m -> p -> Double 
--------------------------------------------------------------------------
-------------------------------- Alias -----------------------------------
--------------------------------------------------------------------------

--------------------------------------------------------------------------
------------------------------- Data -------------------------------------
--------------------------------------------------------------------------
data ValuationInfo m p = ValuationInfo {
                                           viModel :: m,
                                           viPayOff :: p
                                       }
